<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>香蕉牌苹果</title>
  <subtitle>Senior Web Backend Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-29T11:58:46.506Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>香蕉牌苹果</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Python开发环境(win10)</title>
    <link href="http://yoursite.com/2017/04/29/build-python-devenv/"/>
    <id>http://yoursite.com/2017/04/29/build-python-devenv/</id>
    <published>2017-04-29T10:44:31.000Z</published>
    <updated>2017-04-29T11:58:46.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Anaconda2"><a href="#安装Anaconda2" class="headerlink" title="安装Anaconda2"></a>安装Anaconda2</h3><ul>
<li><p>版本: 4.3.1-Windows-x86_64 (选择Python3.6 or Python2.7)</p>
</li>
<li><p>安装地址: <a href="https://www.continuum.io/downloads#windows" target="_blank" rel="external">&gt;&gt;</a></p>
</li>
</ul>
<h3 id="安装-JetBrains-PyCharm"><a href="#安装-JetBrains-PyCharm" class="headerlink" title="安装 JetBrains PyCharm"></a>安装 JetBrains PyCharm</h3><ul>
<li>版本: PyCharm Professional Edition</li>
</ul>
<a id="more"></a>
<ul>
<li>安装地址: <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">&gt;&gt;</a>, 安装时选择自动配置Python环境变量</li>
</ul>
<h3 id="PyCharm设置"><a href="#PyCharm设置" class="headerlink" title="PyCharm设置"></a>PyCharm设置</h3><ul>
<li>在New Project的Interpreter中指定python.exe路径</li>
</ul>
<h3 id="Anaconda常用命令"><a href="#Anaconda常用命令" class="headerlink" title="Anaconda常用命令"></a>Anaconda常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">python --vesion </div><div class="line"></div><div class="line">ipython <span class="comment">#交互式命令行 Shell</span></div><div class="line"> </div><div class="line">jupyter notebook  <span class="comment">#cd到.ipynb文件目录 启动jupyter</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>让Python带你飞</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装Anaconda2&quot;&gt;&lt;a href=&quot;#安装Anaconda2&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda2&quot;&gt;&lt;/a&gt;安装Anaconda2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;版本: 4.3.1-Windows-x86_64 (选择Python3.6 or Python2.7)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装地址: &lt;a href=&quot;https://www.continuum.io/downloads#windows&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装-JetBrains-PyCharm&quot;&gt;&lt;a href=&quot;#安装-JetBrains-PyCharm&quot; class=&quot;headerlink&quot; title=&quot;安装 JetBrains PyCharm&quot;&gt;&lt;/a&gt;安装 JetBrains PyCharm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;版本: PyCharm Professional Edition&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在redis中使用Lua脚本</title>
    <link href="http://yoursite.com/2017/04/28/redis-uselua/"/>
    <id>http://yoursite.com/2017/04/28/redis-uselua/</id>
    <published>2017-04-28T15:40:21.000Z</published>
    <updated>2017-04-29T10:33:32.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h2><p>Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下:<br><a id="more"></a></p>
<ul>
<li><p>减少网络开销: 多个redis请求可以在一个脚本中一次发送一个请求,减少网络往返时延。</p>
</li>
<li><p>原子操作: Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。编写脚本的<br>过程中无需担心会出现竞态条件,也就无需使用事务。事务可以完成的所有功能都可以用脚本实现。</p>
</li>
<li><p>复用: 客户端发送的脚本会永久存储在Redis中,其他语言开发的项目可以复用之。</p>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="1-访问频率限制"><a href="#1-访问频率限制" class="headerlink" title="1.访问频率限制"></a>1.访问频率限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span> <span class="built_in">times</span> = redis.call(<span class="string">'incr'</span>,KEYS[1])</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">times</span> == 1 <span class="keyword">then</span> </div><div class="line"><span class="comment">#KEYS[1]键刚创建,所以为其设置生存时间</span></div><div class="line">redis.call(<span class="string">'expire'</span>,KEYS[1],ARGV[1])</div><div class="line">end </div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">times</span> &gt; tonumber(ARGV[2]) <span class="keyword">then</span>	</div><div class="line"><span class="built_in">return</span> 0</div><div class="line">end </div><div class="line"></div><div class="line"><span class="built_in">return</span> 1	</div><div class="line"></div><div class="line"><span class="comment">#保存该脚本为test.lua,执行该脚本:</span></div><div class="line"></div><div class="line">redis-cli --eval /path/test.lua key1 , 10 2</div><div class="line"></div><div class="line"><span class="comment">#--eval参数是告诉redis-cli读取并运行后面的Lua脚本,/path/test.jua是脚本文件的路径,key1是要操作的键，在脚本中使用KEYS[1]获取,10和2是参数，在脚本中使用ARGV[1]和ARGV[2]获得值（每10秒最多访问3次),注意空格</span></div></pre></td></tr></table></figure>
<h3 id="2-java代码示例"><a href="#2-java代码示例" class="headerlink" title="2.java代码示例"></a>2.java代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//redis lua 脚本</span></div><div class="line"><span class="keyword">static</span> String luaScript = <span class="string">"local timeValue = redis.call('get',KEYS[1]) if timeValue &lt; ARGV[1] then return  redis.call('mset',KEYS[1],ARGV[1],KEYS[2],ARGV[2]) end return nil"</span>;</div><div class="line"></div><div class="line"><span class="comment">//执行脚本</span></div><div class="line">redisClient.executeLuaScript(luaScript,<span class="string">"key1"</span>, <span class="string">"key2"</span>, <span class="string">"value1"</span>, <span class="string">"value2"</span>);</div><div class="line"></div><div class="line"><span class="comment">//executeLuaScript方法:</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">executeLuaScript</span><span class="params">(String script,String key1,String key2,String avg1,String avg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execution(<span class="keyword">new</span> JedisResultTask() &#123;</div><div class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doExecution</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.eval(script,<span class="number">2</span>,key1,key2,avg1,avg2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="3-解决抢红包高并发的问题"><a href="#3-解决抢红包高并发的问题" class="headerlink" title="3.解决抢红包高并发的问题"></a>3.解决抢红包高并发的问题</h3><blockquote>
<blockquote>
<blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/hengyunabc/article/details/19433779/" target="_blank" rel="external">传送门</a></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;脚本介绍&quot;&gt;&lt;a href=&quot;#脚本介绍&quot; class=&quot;headerlink&quot; title=&quot;脚本介绍&quot;&gt;&lt;/a&gt;脚本介绍&lt;/h2&gt;&lt;p&gt;Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>在Redis中使用管道</title>
    <link href="http://yoursite.com/2017/04/23/redis-usepip/"/>
    <id>http://yoursite.com/2017/04/23/redis-usepip/</id>
    <published>2017-04-23T11:12:45.000Z</published>
    <updated>2017-04-23T14:19:04.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>客户端和Redis使用TCP协议连接。不论是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果,都需要进过网络传输,这两部分的总耗时称为往返时延。大致来说到本地回环地址(loop back address)的往返时延在数据量级上相当于Redis处理一条简单命令的时间。<br>如果执行较多的命令,每个命令的往返时延累加起来对性能还是有一定影响的。<br>在执行多个命令时每条命令都需要等待上一条命令执行完才能执行,即使命令不需要上一条命令的执行结果。Redis的底层通信协议对管道(pipelining)提供了支持。通过管道可以一次性发送多条命令并在执行完成后一次性将结果返回，当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这组命令一起通过管道发出。管道通过减少客户端与Redis的通信次数来实现降低往返时延累计值的目的。</p>
<p>简单概括两点就是:</p>
<ul>
<li>多个命令之间没有依赖关系,每个命令只需单独执行</li>
<li>对响应时间要求苛刻</li>
</ul>
<h3 id="不使用管道时命令执行示意图（纵向表示时间）"><a href="#不使用管道时命令执行示意图（纵向表示时间）" class="headerlink" title="不使用管道时命令执行示意图（纵向表示时间）"></a>不使用管道时命令执行示意图（纵向表示时间）</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/1.jpg" alt="不使用管道时命令执行示意图"></p>
<h3 id="使用管道时命令执行示意图"><a href="#使用管道时命令执行示意图" class="headerlink" title="使用管道时命令执行示意图"></a>使用管道时命令执行示意图</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/2.jpg" alt="使用管道时命令执行示意图"></p>
<h2 id="java代码示例"><a href="#java代码示例" class="headerlink" title="java代码示例"></a>java代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">redisClient.executionPipelinedExt(<span class="keyword">new</span> Redis.JedisResultTask&lt;Object&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">protected</span> Object <span class="title">doExecution</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">              Pipeline pipeline = jedis.pipelined();</div><div class="line">              </div><div class="line">              pipeline.set(“key1”,“value1”);</div><div class="line">              pipeline.set(“key2”,“value2”);</div><div class="line">              pipeline.set(“key3”,“value3”);</div><div class="line">		...</div><div class="line">              pipeline.sync();</div><div class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h2 id="Python代码示例-使用redis-py"><a href="#Python代码示例-使用redis-py" class="headerlink" title="Python代码示例(使用redis-py)"></a>Python代码示例(使用<a href="http://redis-py.readthedocs.io/en/latest/" target="_blank" rel="external">redis-py</a>)</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> redis</div><div class="line">r = redis.StrictRedis()</div><div class="line"></div><div class="line"><span class="comment"># redis-py的事务使用方式如下:</span></div><div class="line"></div><div class="line">pipe = r.pipeline()</div><div class="line">pipe.set(<span class="string">'key1'</span>,<span class="string">'value1'</span>)</div><div class="line">pipe.get(<span class="string">'key1'</span>)</div><div class="line">result = pipe.execute()</div><div class="line"><span class="keyword">print</span> result</div><div class="line"></div><div class="line"><span class="comment"># 管道的使用方式和事务相同,只不过需要在创建时加上参数transaction=False:</span></div><div class="line"></div><div class="line">pipe = r.pipeline(transaction=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 支持链式调用</span></div><div class="line"></div><div class="line">r.pipeline().set(<span class="string">'key1'</span>,<span class="string">'value1'</span>).get(<span class="string">'key1'</span>).execute()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;客户端和Redis使用TCP协议连接。不论是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果,都需要进过网络传输,这两部分的总耗时称为往返时延。大致来说到本地回环地址(loop back address)的往返时延在数据量级上相当于Redis处理一条简单命令的时间。&lt;br&gt;如果执行较多的命令,每个命令的往返时延累加起来对性能还是有一定影响的。&lt;br&gt;在执行多个命令时每条命令都需要等待上一条命令执行完才能执行,即使命令不需要上一条命令的执行结果。Redis的底层通信协议对管道(pipelining)提供了支持。通过管道可以一次性发送多条命令并在执行完成后一次性将结果返回，当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这组命令一起通过管道发出。管道通过减少客户端与Redis的通信次数来实现降低往返时延累计值的目的。&lt;/p&gt;
&lt;p&gt;简单概括两点就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个命令之间没有依赖关系,每个命令只需单独执行&lt;/li&gt;
&lt;li&gt;对响应时间要求苛刻&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不使用管道时命令执行示意图（纵向表示时间）&quot;&gt;&lt;a href=&quot;#不使用管道时命令执行示意图（纵向表示时间）&quot; class=&quot;headerlink&quot; title=&quot;不使用管道时命令执行示意图（纵向表示时间）&quot;&gt;&lt;/a&gt;不使用管道时命令执行示意图（纵向表示时间）&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oov8bjfvw.bkt.clouddn.com/1.jpg&quot; alt=&quot;不使用管道时命令执行示意图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用管道时命令执行示意图&quot;&gt;&lt;a href=&quot;#使用管道时命令执行示意图&quot; class=&quot;headerlink&quot; title=&quot;使用管道时命令执行示意图&quot;&gt;&lt;/a&gt;使用管道时命令执行示意图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oov8bjfvw.bkt.clouddn.com/2.jpg&quot; alt=&quot;使用管道时命令执行示意图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;java代码示例&quot;&gt;&lt;a href=&quot;#java代码示例&quot; class=&quot;headerlink&quot; title=&quot;java代码示例&quot;&gt;&lt;/a&gt;java代码示例&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redisClient.executionPipelinedExt(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Redis.JedisResultTask&amp;lt;Object&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;doExecution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Jedis jedis)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              Pipeline pipeline = jedis.pipelined();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              pipeline.set(“key1”,“value1”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              pipeline.set(“key2”,“value2”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              pipeline.set(“key3”,“value3”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              pipeline.sync();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Python代码示例-使用redis-py&quot;&gt;&lt;a href=&quot;#Python代码示例-使用redis-py&quot; class=&quot;headerlink&quot; title=&quot;Python代码示例(使用redis-py)&quot;&gt;&lt;/a&gt;Python代码示例(使用&lt;a href=&quot;http://redis-py.readthedocs.io/en/latest/&quot;&gt;redis-py&lt;/a&gt;)&lt;/h2&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github,搭建个性化博客</title>
    <link href="http://yoursite.com/2017/04/08/create-blog-by-hexo/"/>
    <id>http://yoursite.com/2017/04/08/create-blog-by-hexo/</id>
    <published>2017-04-08T14:05:00.155Z</published>
    <updated>2017-04-23T12:36:17.686Z</updated>
    
    <content type="html"><![CDATA[<p>本教程在Win10上完成的示例,Mac环境可同时参考<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">&gt;&gt;&gt;&gt;</a></p>
<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一.环境准备"></a>一.环境准备</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装  Node.js"></a>安装  Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址 https://nodejs.org/en/</div></pre></td></tr></table></figure>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Git-1.9.5-preview20150319.exe</div></pre></td></tr></table></figure>
<h3 id="配置Git环境变量："><a href="#配置Git环境变量：" class="headerlink" title="配置Git环境变量："></a>配置Git环境变量：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path:</div><div class="line">..\Git\bin</div><div class="line">..\Git\libexec\git-core</div></pre></td></tr></table></figure>
<h3 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h3><h2 id="二-安装Hexo"><a href="#二-安装Hexo" class="headerlink" title="二.安装Hexo"></a>二.安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 打开 Node.js <span class="built_in">command</span> prompt 控制台 (以管理员身份运行）</div><div class="line">&gt; 执行命令  npm install -g hexo</div><div class="line">&gt;  创建一个文件夹，如：C:\blog，<span class="built_in">cd</span>到blog里执行 :  hexo init</div><div class="line">&gt;  继续再B<span class="built_in">log</span>目录下执行命令:   hexo generate （hexo g 也可以），生成静态页面</div><div class="line">&gt;  启动本地服务，进行文章预览调试 :   hexo server</div><div class="line">&gt; 浏览器输入 http://localhost:4000/</div></pre></td></tr></table></figure>
<h2 id="三-配置Github"><a href="#三-配置Github" class="headerlink" title="三.配置Github"></a>三.配置Github</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">创建库,库名格式: 用户名.github.io</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="四-配置部署"><a href="#四-配置部署" class="headerlink" title="四.配置部署"></a>四.配置部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;在blog目录, 修改  _config.yml文件配置（修改后另存为UTF-8编码）:</div><div class="line"></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/XXX/XXX.github.io.git</div><div class="line">  branch: master</div><div class="line"></div><div class="line">&gt; 组件安装  ： npm install hexo-deployer-git --save </div><div class="line">&gt;  部署 hexo deploy</div></pre></td></tr></table></figure>
<h2 id="五-访问"><a href="#五-访问" class="headerlink" title="五.访问"></a>五.访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://XXX.github.io/</div></pre></td></tr></table></figure>
<h2 id="六-一些基本路径"><a href="#六-一些基本路径" class="headerlink" title="六. 一些基本路径"></a>六. 一些基本路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文章在 <span class="built_in">source</span>/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里</div></pre></td></tr></table></figure>
<h2 id="七-常用命令"><a href="#七-常用命令" class="headerlink" title="七.常用命令"></a>七.常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章，生成指定名称的文章至 hexo\source\_posts\postName.md 编辑器可以用Sublime，支持 markdown 语法 推荐一款markdown在线编辑工具(https://www.zybuluo.com/mdeditor),本机操作可使用markdownpad                     </span></div><div class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></div><div class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="comment">#开启预览访问端口 ,进行文章预览调试（http://localhost:4000/ ，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></div><div class="line">hexo <span class="built_in">help</span>  <span class="comment">#查看帮助</span></div><div class="line">hexo version  <span class="comment">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<h3 id="新增文章-修改文章后-依次执行以下命令"><a href="#新增文章-修改文章后-依次执行以下命令" class="headerlink" title="新增文章 修改文章后 依次执行以下命令"></a>新增文章 修改文章后 依次执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">#非必须</span></div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="八-更换主题"><a href="#八-更换主题" class="headerlink" title="八.更换主题"></a>八.更换主题</h2><h3 id="主题下载："><a href="#主题下载：" class="headerlink" title="主题下载："></a>主题下载：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div><div class="line"></div><div class="line">https://github.com/litten/hexo-theme-yilia.git  是主题路径</div><div class="line">themes/yilia 是主题目录 ,目录是否是yilia 无所谓，只要与_config.yml文件中的配置一致即可。 主题很多可自行选择。</div></pre></td></tr></table></figure>
<h3 id="主题配置修改"><a href="#主题配置修改" class="headerlink" title="主题配置修改"></a>主题配置修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">安装完成后，打开 blog\_config.yml ，修改主题为 yilia</div><div class="line"></div><div class="line">theme: yilia</div></pre></td></tr></table></figure>
<h3 id="主题配置项修改"><a href="#主题配置项修改" class="headerlink" title="主题配置项修改"></a>主题配置项修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">打开 blog\themes\yilia 目录，编辑主题配置文件 _config.yml</div></pre></td></tr></table></figure>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/yilia</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h2 id="九-域名绑定"><a href="#九-域名绑定" class="headerlink" title="九.域名绑定"></a>九.域名绑定</h2><p>可参考这个<a href="https://zhidao.baidu.com/question/1961019546914335340.html" target="_blank" rel="external">&gt;&gt;&gt;</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程在Win10上完成的示例,Mac环境可同时参考&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-环境准备&quot;&gt;&lt;a href=&quot;#一-环境准备&quot; class=&quot;headerlink&quot; title=&quot;一.环境准备&quot;&gt;&lt;/a&gt;一.环境准备&lt;/h2&gt;&lt;h3 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装  Node.js&quot;&gt;&lt;/a&gt;安装  Node.js&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;下载地址 https://nodejs.org/en/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装-Git&quot;&gt;&lt;a href=&quot;#安装-Git&quot; class=&quot;headerlink&quot; title=&quot;安装 Git&quot;&gt;&lt;/a&gt;安装 Git&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Git-1.9.5-preview20150319.exe&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置Git环境变量：&quot;&gt;&lt;a href=&quot;#配置Git环境变量：&quot; class=&quot;headerlink&quot; title=&quot;配置Git环境变量：&quot;&gt;&lt;/a&gt;配置Git环境变量：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Path:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;..\Git\bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;..\Git\libexec\git-core&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;注册Github账户&quot;&gt;&lt;a href=&quot;#注册Github账户&quot; class=&quot;headerlink&quot; title=&quot;注册Github账户&quot;&gt;&lt;/a&gt;注册Github账户&lt;/h3&gt;&lt;h2 id=&quot;二-安装Hexo&quot;&gt;&lt;a href=&quot;#二-安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;二.安装Hexo&quot;&gt;&lt;/a&gt;二.安装Hexo&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 打开 Node.js &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; prompt 控制台 (以管理员身份运行）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 执行命令  npm install -g hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;  创建一个文件夹，如：C:\blog，&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;到blog里执行 :  hexo init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;  继续再B&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;目录下执行命令:   hexo generate （hexo g 也可以），生成静态页面&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;  启动本地服务，进行文章预览调试 :   hexo server&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 浏览器输入 http://localhost:4000/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三-配置Github&quot;&gt;&lt;a href=&quot;#三-配置Github&quot; class=&quot;headerlink&quot; title=&quot;三.配置Github&quot;&gt;&lt;/a&gt;三.配置Github&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;创建库,库名格式: 用户名.github.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
