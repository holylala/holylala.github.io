<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>香蕉牌苹果</title>
  <subtitle>Senior Web Backend Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-14T16:12:29.512Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>香蕉牌苹果</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数据分析:Kaggle案例之StarCraft II Replay Analysis</title>
    <link href="http://yoursite.com/2017/05/14/python-da-kagglepro-starwar/"/>
    <id>http://yoursite.com/2017/05/14/python-da-kagglepro-starwar/</id>
    <published>2017-05-14T15:37:01.000Z</published>
    <updated>2017-05-14T16:12:29.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Project-Detail"><a href="#1-Project-Detail" class="headerlink" title="1.Project Detail"></a>1.Project Detail</h3><ul>
<li><p>项目地址: <a href="https://www.kaggle.com/sfu-summit/starcraft-ii-replay-analysis" target="_blank" rel="external">&gt;&gt;&gt;</a></p>
</li>
<li><p>数据来源: 下载 starcraft.csv(This dataset is an aggregate of the screen-fixations from screen movements of StarCraft 2 replay files) , 共21列数据</p>
</li>
<li><p>Inspiration: 分析每个战队的APM(Action per minute)和HoursPerWeek(Hours spent playing per week)</p>
</li>
</ul>
<h3 id="2-Code-Say"><a href="#2-Code-Say" class="headerlink" title="2.Code Say"></a>2.Code Say</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="comment"># 引入必要的库 pandas_tools:封装的工具</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> pandas_tools <span class="keyword">import</span> inspect_dataset, visualize_league_attributes,\</div><div class="line">    visualize_league_attribute_stats, process_missing_data</div><div class="line"></div><div class="line">dataset_path = <span class="string">'./dataset/starcraft.csv'</span> <span class="comment">##指定需要分析数据文件路径</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            主函数</div><div class="line">    """</div><div class="line">    </div><div class="line">    <span class="comment">## Step.0 加载数据</span></div><div class="line">    df_data = pd.read_csv(dataset_path)</div><div class="line">    </div><div class="line">    <span class="comment">## Step.1 查看数据 数据预览</span></div><div class="line">    inspect_dataset(df_data)</div><div class="line">    </div><div class="line">    <span class="comment">## Step.2 处理缺失数据 设置默认值</span></div><div class="line">    df_data = process_missing_data(df_data)</div><div class="line">    </div><div class="line">    <span class="comment">## Step.3.1 可视化战队属性，散点图</span></div><div class="line">    column_names = [<span class="string">'LeagueIndex'</span>,  <span class="comment"># 战队索引号</span></div><div class="line">                    <span class="string">'HoursPerWeek'</span>, <span class="comment"># 每周游戏时间</span></div><div class="line">                    <span class="string">'Age'</span>,          <span class="comment"># 战队中玩家的年龄</span></div><div class="line">                    <span class="string">'APM'</span>,          <span class="comment"># 操作速度(技术能力)</span></div><div class="line">                    <span class="string">'WorkersMade'</span>   <span class="comment"># 单位时间的建造数</span></div><div class="line">                    ]</div><div class="line">    visualize_league_attributes(df_data[column_names]) <span class="comment">## list 不连续索引</span></div><div class="line">    </div><div class="line">    <span class="comment">## Step3.2 可视化战队属性统计值</span></div><div class="line">    visualize_league_attribute_stats(df_data[column_names], </div><div class="line">                                     <span class="string">'APM'</span>,</div><div class="line">                                     savedata_path=<span class="string">'./league_apm_stats.csv'</span>,</div><div class="line">                                     savefig_path=<span class="string">'./league_apm_stats.png'</span>,)</div><div class="line">    </div><div class="line">    visualize_league_attribute_stats(df_data[column_names], </div><div class="line">                                     <span class="string">'HoursPerWeek'</span>,</div><div class="line">                                     savedata_path=<span class="string">'./league_hrs_stats.csv'</span>,</div><div class="line">                                     savefig_path=<span class="string">'./league_hrs_stats.png'</span>,)</div><div class="line">    </div><div class="line"><span class="comment"># 运行入口</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run_main()</div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># pandas_tools.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpatches</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inspect_dataset</span><span class="params">(df_data)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            查看加载的数据基本信息</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> <span class="string">'数据集基本信息：'</span></div><div class="line">    <span class="keyword">print</span> df_data.info()</div><div class="line">    </div><div class="line">    <span class="keyword">print</span> <span class="string">'数据集有%i行，%i列'</span> %(df_data.shape[<span class="number">0</span>], df_data.shape[<span class="number">1</span>])</div><div class="line">    <span class="keyword">print</span> <span class="string">'数据预览:'</span></div><div class="line">    <span class="keyword">print</span> df_data.head()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_missing_data</span><span class="params">(df_data)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            处理缺失数据</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> df_data.isnull().values.any():</div><div class="line">        <span class="comment"># 存在缺失数据</span></div><div class="line">        df_data = df_data.fillna(<span class="number">0.</span>)    <span class="comment"># 填充nan</span></div><div class="line"><span class="comment">#         df_data = df_data.dropna()    # 过滤nan</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> df_data</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_league_attributes</span><span class="params">(df_data, save_fig = True)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            可视化战队属性</div><div class="line">    """</div><div class="line">    <span class="comment"># 创建figure  放四张图</span></div><div class="line">    fig = plt.figure(figsize=(<span class="number">15.0</span>, <span class="number">10.0</span>))</div><div class="line">    ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</div><div class="line">    ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</div><div class="line">    ax3 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">    ax4 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 解决matplotlib显示中文问题</span></div><div class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>] <span class="comment">#指定默认字体  </span></div><div class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span> <span class="comment">#解决保存图像是负号'-'显示为方块的问题</span></div><div class="line">    </div><div class="line">    fig.suptitle(<span class="string">u'战队属性'</span>) <span class="comment">#给图起个标题</span></div><div class="line"></div><div class="line">    <span class="comment"># 画散点图  横轴战队 纵轴每周游戏时间</span></div><div class="line">    ax1.scatter(df_data[<span class="string">'LeagueIndex'</span>], df_data[<span class="string">'HoursPerWeek'</span>])</div><div class="line">    ax1.set_xlabel(<span class="string">u'战队'</span>)</div><div class="line">    ax1.set_ylabel(<span class="string">u'每周游戏时间'</span>)</div><div class="line"></div><div class="line">    ax2.scatter(df_data[<span class="string">'LeagueIndex'</span>], df_data[<span class="string">'Age'</span>])</div><div class="line">    ax2.set_xlabel(<span class="string">u'战队'</span>)</div><div class="line">    ax2.set_ylabel(<span class="string">u'玩家年龄'</span>)</div><div class="line">    </div><div class="line">    ax3.scatter(df_data[<span class="string">'LeagueIndex'</span>], df_data[<span class="string">'APM'</span>])</div><div class="line">    ax3.set_xlabel(<span class="string">u'战队'</span>)</div><div class="line">    ax3.set_ylabel(<span class="string">u'APM'</span>)</div><div class="line">    </div><div class="line">    ax4.scatter(df_data[<span class="string">'LeagueIndex'</span>], df_data[<span class="string">'WorkersMade'</span>])</div><div class="line">    ax4.set_xlabel(<span class="string">u'战队'</span>)</div><div class="line">    ax4.set_ylabel(<span class="string">u'单位时间建造数'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> save_fig:</div><div class="line">        plt.savefig(<span class="string">'./league_attributes.png'</span>) <span class="comment">#数据存储</span></div><div class="line">        </div><div class="line">    plt.show()</div><div class="line">    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_league_attribute_stats</span><span class="params">(df_data, attr_label, </span></span></div><div class="line">                                     savedata_path = <span class="string">''</span>,</div><div class="line">                                     savefig_path = <span class="string">''</span>):</div><div class="line">    <span class="string">"""</span></div><div class="line">           可视化战队属性统计值  1到8 战队数</div><div class="line">    """</div><div class="line">    league_idx_lst = range(<span class="number">1</span>,<span class="number">9</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 统计最小值 最大值 和均值</span></div><div class="line">    stats_min = []</div><div class="line">    stats_max = []</div><div class="line">    stats_mean = []</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> league_idx <span class="keyword">in</span> league_idx_lst: <span class="comment"># 处理每一个战队的数据</span></div><div class="line">        <span class="comment"># 数据选取 loc 标签索引 df_data['LeagueIndex'] == league_idx 行索引,true or false 只取满足条件的数据 attr_label:列索引</span></div><div class="line">        filtered_data = df_data.loc[df_data[<span class="string">'LeagueIndex'</span>] == league_idx, attr_label]</div><div class="line">        </div><div class="line">        stats_min.append(filtered_data.min())</div><div class="line">        stats_max.append(filtered_data.max())</div><div class="line">        stats_mean.append(filtered_data.mean())</div><div class="line">        </div><div class="line">    league_ser = pd.Series(league_idx_lst, name=<span class="string">'LeagueIndex'</span>) <span class="comment"># 把各战队编号list变成series</span></div><div class="line">    stats_min_ser = pd.Series(stats_min, name=<span class="string">'min'</span>) <span class="comment"># 把各战队统计数据list变成series</span></div><div class="line">    stats_max_ser = pd.Series(stats_max, name=<span class="string">'max'</span>)</div><div class="line">    stats_mean_ser = pd.Series(stats_mean, name=<span class="string">'mean'</span>)</div><div class="line"></div><div class="line">    <span class="comment">#把Series拼装成DataFrame axis=1 指定轴方向 横向拼接</span></div><div class="line">    df_result = pd.concat([league_ser, stats_min_ser, stats_max_ser, stats_mean_ser], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment">#数据保存</span></div><div class="line">    <span class="keyword">if</span> savedata_path != <span class="string">''</span>:</div><div class="line">        df_result.to_csv(savedata_path, index=<span class="keyword">None</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 统计值可视化    </span></div><div class="line">    <span class="comment"># 创建figure</span></div><div class="line">    fig = plt.figure(figsize=(<span class="number">15.0</span>, <span class="number">10.0</span>))</div><div class="line">    fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 解决matplotlib显示中文问题</span></div><div class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>] <span class="comment">#指定默认字体  </span></div><div class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span> <span class="comment">#解决保存图像是负号'-'显示为方块的问题</span></div><div class="line">    </div><div class="line">    plt.plot(df_result[<span class="string">'LeagueIndex'</span>], df_result[<span class="string">'mean'</span>], color=<span class="string">'b'</span>)</div><div class="line">    plt.plot(df_result[<span class="string">'LeagueIndex'</span>], df_result[<span class="string">'min'</span>], color=<span class="string">'g'</span>)</div><div class="line">    plt.plot(df_result[<span class="string">'LeagueIndex'</span>], df_result[<span class="string">'max'</span>], color=<span class="string">'r'</span>)</div><div class="line">    plt.xlabel(<span class="string">u"战队"</span>)</div><div class="line">    plt.ylabel(attr_label)</div><div class="line">    plt.title(attr_label + <span class="string">u"--Lqian"</span>)</div><div class="line"></div><div class="line">    <span class="comment">#添加图例</span></div><div class="line">    blue_patch = mpatches.Patch(color=<span class="string">'blue'</span>, label=<span class="string">u"均值 "</span> + attr_label)</div><div class="line">    green_patch = mpatches.Patch(color=<span class="string">'green'</span>, label=<span class="string">u'最小值 '</span>+ attr_label)</div><div class="line">    red_patch = mpatches.Patch(color=<span class="string">'red'</span>, label=<span class="string">u'最大值 '</span>+ attr_label)</div><div class="line">    plt.legend(handles=[blue_patch, green_patch, red_patch], loc=<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> savefig_path != <span class="string">''</span>:</div><div class="line">        plt.savefig(savefig_path)</div><div class="line">    </div><div class="line">    plt.show()</div></pre></td></tr></table></figure>
<h3 id="3-战队属性散点图"><a href="#3-战队属性散点图" class="headerlink" title="3.战队属性散点图"></a>3.战队属性散点图</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/zhandui.png?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="战队属性散点图"></p>
<h3 id="4-战队APM"><a href="#4-战队APM" class="headerlink" title="4.战队APM"></a>4.战队APM</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/zhandui1.png?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="战队APM"></p>
<h3 id="5-战队每周游戏时间"><a href="#5-战队每周游戏时间" class="headerlink" title="5.战队每周游戏时间"></a>5.战队每周游戏时间</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/zhandui2.png?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="战队每周游戏时间"></p>
<h3 id="6-结论"><a href="#6-结论" class="headerlink" title="6.结论"></a>6.结论</h3><p>孰能生巧，Skill comes of practice.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Project-Detail&quot;&gt;&lt;a href=&quot;#1-Project-Detail&quot; class=&quot;headerlink&quot; title=&quot;1.Project Detail&quot;&gt;&lt;/a&gt;1.Project Detail&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;项目地址: &lt;a href=&quot;https://www.kaggle.com/sfu-summit/starcraft-ii-replay-analysis&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据来源: 下载 starcraft.csv(This dataset is an aggregate of the screen-fixations from screen movements of StarCraft 2 replay files) , 共21列数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inspiration: 分析每个战队的APM(Action per minute)和HoursPerWeek(Hours spent playing per week)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-Code-Say&quot;&gt;&lt;a href=&quot;#2-Code-Say&quot; class=&quot;headerlink&quot; title=&quot;2.Code Say&quot;&gt;&lt;/a&gt;2.Code Say&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="纯代码" scheme="http://yoursite.com/tags/%E7%BA%AF%E4%BB%A3%E7%A0%81/"/>
    
      <category term="kaggle" scheme="http://yoursite.com/tags/kaggle/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>走进Docker之Docker初识</title>
    <link href="http://yoursite.com/2017/05/01/docker-whatis/"/>
    <id>http://yoursite.com/2017/05/01/docker-whatis/</id>
    <published>2017-04-30T17:34:03.000Z</published>
    <updated>2017-04-30T18:14:44.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker历史"><a href="#Docker历史" class="headerlink" title="Docker历史"></a>Docker历史</h3><ul>
<li>2010 dotCloud PAAS</li>
<li>2013 docker开源</li>
<li>2015.4 D轮</li>
<li>2014.6 Docker 1.0</li>
</ul>
<a id="more"></a>
<ul>
<li>2014.7 C轮</li>
<li>Now:free Community Edition (CE) and as a subscription in Enterprise Edition (EE)</li>
</ul>
<h3 id="What’s-Docker"><a href="#What’s-Docker" class="headerlink" title="What’s Docker"></a>What’s Docker</h3><ul>
<li><p><a href="https://www.docker.com/what-docker" target="_blank" rel="external">Docker is the world’s leading software container platform</a></p>
</li>
<li><p><a href="https://github.com/moby/moby" target="_blank" rel="external">开源</a> , 跨平台</p>
</li>
</ul>
<h3 id="技术核心"><a href="#技术核心" class="headerlink" title="技术核心"></a>技术核心</h3><ul>
<li><p>镜像： 集装箱</p>
</li>
<li><p>仓库 ： 码头</p>
</li>
<li><p>容器 ： 运行程序的地方 </p>
</li>
</ul>
<p><img src="http://oov8bjfvw.bkt.clouddn.com/docker01.png?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="技术核心"></p>
<p>简单理解就是去仓库把镜像下到本地，用命令把镜像运行起来变成容器。</p>
<h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><ul>
<li><p>官方库: <a href="hub.docker.com">&gt;&gt;&gt;</a></p>
</li>
<li><p>网  易: <a href="https://c.163.com/hub#/m/home/" target="_blank" rel="external">&gt;&gt;&gt;</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker历史&quot;&gt;&lt;a href=&quot;#Docker历史&quot; class=&quot;headerlink&quot; title=&quot;Docker历史&quot;&gt;&lt;/a&gt;Docker历史&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2010 dotCloud PAAS&lt;/li&gt;
&lt;li&gt;2013 docker开源&lt;/li&gt;
&lt;li&gt;2015.4 D轮&lt;/li&gt;
&lt;li&gt;2014.6 Docker 1.0&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析:Kaggle案例之2016 Election Pools</title>
    <link href="http://yoursite.com/2017/04/30/python-da-kagglepro-elepolls/"/>
    <id>http://yoursite.com/2017/04/30/python-da-kagglepro-elepolls/</id>
    <published>2017-04-30T15:58:01.000Z</published>
    <updated>2017-04-30T18:15:32.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Project-Detail"><a href="#1-Project-Detail" class="headerlink" title="1.Project Detail"></a>1.Project Detail</h3><ul>
<li><p>地址: <a href="https://www.kaggle.com/fivethirtyeight/2016-election-polls" target="_blank" rel="external">&gt;&gt;&gt;</a>(建议翻墙)</p>
</li>
<li><p>数据来源: 下载 presidential_polls.csv(This dataset is a collection of state and national polls conducted from November 2015-November 2016 on the 2016 presidential election) , 共27列数据</p>
</li>
<li><p>Inspiration: 分析每个月的民意调查统计趋势</p>
</li>
</ul>
<h3 id="2-撸代码"><a href="#2-撸代码" class="headerlink" title="2.撸代码"></a>2.撸代码</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># 引入必要的库</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 判断一个字符串能否转换为float</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_convert_float</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        float(s)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(str_array)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            返回字符串数组中数字的总和</div><div class="line">    """</div><div class="line">    <span class="comment"># 去掉不能转换成数字的数据</span></div><div class="line">    cleaned_data = filter(is_convert_float, str_array)</div><div class="line">    </div><div class="line">    <span class="comment"># 转换数据类型</span></div><div class="line">    float_array = np.array(cleaned_data, np.float)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> np.sum(float_array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        main function </div><div class="line">    """</div><div class="line">    <span class="comment"># 数据文件地址</span></div><div class="line">    filename = <span class="string">'./presidential_polls.csv'</span></div><div class="line">    </div><div class="line">    <span class="comment">## Step1. 列名预处理 </span></div><div class="line">    <span class="comment"># 读取列名，即第一行数据  r:代表读取 f：代表打开的文件</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        col_names_str = f.readline()[:<span class="number">-1</span>] <span class="comment"># [:-1]表示不读取末尾的换行符'\n' 读取标题行 cycle,branch,...</span></div><div class="line">    </div><div class="line">    <span class="comment"># 将字符串拆分，并组成列表</span></div><div class="line">    col_name_lst = col_names_str.split(<span class="string">','</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 使用的列名： 统计截止时间,克林顿民意数据,川普民意数据,克林顿校准民意数据,川普校准民意数据</span></div><div class="line">    use_col_name_lst = [<span class="string">'enddate'</span>, <span class="string">'rawpoll_clinton'</span>, <span class="string">'rawpoll_trump'</span>,<span class="string">'adjpoll_clinton'</span>, <span class="string">'adjpoll_trump'</span>]</div><div class="line">    </div><div class="line">    <span class="comment"># 获取相应列名的索引号</span></div><div class="line">    use_col_index_lst = [col_name_lst.index(use_col_name) <span class="keyword">for</span> use_col_name <span class="keyword">in</span> use_col_name_lst]</div><div class="line">    </div><div class="line">    <span class="comment">## Step2. 读取数据</span></div><div class="line">    data_array = np.loadtxt(filename,      <span class="comment"># 文件名</span></div><div class="line">                        delimiter=<span class="string">','</span>, <span class="comment"># 分隔符</span></div><div class="line">                        skiprows=<span class="number">1</span>,    <span class="comment"># 跳过第一行，即跳过列名</span></div><div class="line">                        dtype=str,     <span class="comment"># 数据类型</span></div><div class="line">                        usecols=use_col_index_lst) <span class="comment"># 指定读取的列索引号</span></div><div class="line">    </div><div class="line">    <span class="comment">## Step3. 数据处理</span></div><div class="line">    <span class="comment"># 处理日期格式数据</span></div><div class="line">    enddate_idx = use_col_name_lst.index(<span class="string">'enddate'</span>)</div><div class="line">    enddate_lst = data_array[:,enddate_idx].tolist() <span class="comment">#拿到多维数组中某一列的数据 并转换成列表</span></div><div class="line">    </div><div class="line">    <span class="comment"># 将日期字符串格式统一，即'yy/dd/mm'</span></div><div class="line">    enddate_lst = [enddate.replace(<span class="string">'-'</span>, <span class="string">'/'</span>) <span class="keyword">for</span> enddate <span class="keyword">in</span> enddate_lst]</div><div class="line">    </div><div class="line">    <span class="comment"># 将日期字符串转换成日期</span></div><div class="line">    date_lst = [datetime.datetime.strptime(enddate, <span class="string">'%m/%d/%Y'</span>) <span class="keyword">for</span> enddate <span class="keyword">in</span> enddate_lst]</div><div class="line"></div><div class="line">    <span class="keyword">print</span> data_array[:<span class="number">20</span>] <span class="comment"># ['10/30/2016' '45' '46' '43.29659' '44.72984']</span></div><div class="line">    </div><div class="line">    <span class="comment"># 构造年份-月份 字符列表</span></div><div class="line">    month_lst = [<span class="string">'%d-%02d'</span> %(date_obj.year, date_obj.month) <span class="keyword">for</span> date_obj <span class="keyword">in</span> date_lst]</div><div class="line">    </div><div class="line">    month_array = np.array(month_lst)</div><div class="line">    months = np.unique(month_array) <span class="comment">#去掉重复的年 月</span></div><div class="line">    </div><div class="line">    <span class="comment">## Step4. 数据分析</span></div><div class="line">    <span class="comment"># 统计民意投票数</span></div><div class="line">    <span class="comment"># 克林顿</span></div><div class="line">    <span class="comment"># 原始数据 rawpoll 拿到指定列的全部数据</span></div><div class="line">    rawpoll_clinton_idx = use_col_name_lst.index(<span class="string">'rawpoll_clinton'</span>)</div><div class="line">    rawpoll_clinton_data = data_array[:, rawpoll_clinton_idx]</div><div class="line">    </div><div class="line">    <span class="comment"># 调整后的数据 adjpool</span></div><div class="line">    adjpoll_clinton_idx = use_col_name_lst.index(<span class="string">'adjpoll_clinton'</span>)</div><div class="line">    adjpoll_clinton_data = data_array[:, adjpoll_clinton_idx]</div><div class="line">    </div><div class="line">    <span class="comment"># 川普</span></div><div class="line">    <span class="comment"># 原始数据 rawpoll</span></div><div class="line">    rawpoll_trump_idx = use_col_name_lst.index(<span class="string">'rawpoll_trump'</span>)</div><div class="line">    rawpoll_trump_data = data_array[:, rawpoll_trump_idx]</div><div class="line">    </div><div class="line">    <span class="comment"># 调整后的数据 adjpoll</span></div><div class="line">    adjpoll_trump_idx = use_col_name_lst.index(<span class="string">'adjpoll_trump'</span>)</div><div class="line">    adjpoll_trump_data = data_array[:, adjpoll_trump_idx]</div><div class="line">    </div><div class="line">    <span class="comment"># 结果保存</span></div><div class="line">    results = []</div><div class="line"></div><div class="line">    <span class="comment">#遍历唯一的年月</span></div><div class="line">    <span class="keyword">for</span> month <span class="keyword">in</span> months:   </div><div class="line">        <span class="comment"># clinton</span></div><div class="line">        <span class="comment"># 原始数据 rawpoll</span></div><div class="line">        rawpoll_clinton_month_data = rawpoll_clinton_data[month_array == month]  </div><div class="line">        <span class="comment"># 统计当月的总票数</span></div><div class="line">        rawpoll_clinton_month_sum = get_sum(rawpoll_clinton_month_data)</div><div class="line">        </div><div class="line">        <span class="comment"># 调整数据 adjpoll</span></div><div class="line">        adjpoll_clinton_month_data = adjpoll_clinton_data[month_array == month]  </div><div class="line">        <span class="comment"># 统计当月的总票数</span></div><div class="line">        adjpoll_clinton_month_sum = get_sum(adjpoll_clinton_month_data)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment"># trump</span></div><div class="line">        <span class="comment"># 原始数据 rawpoll</span></div><div class="line">        rawpoll_trump_month_data = rawpoll_trump_data[month_array == month]</div><div class="line">        <span class="comment"># 统计当月的总票数</span></div><div class="line">        rawpoll_trump_month_sum = get_sum(rawpoll_trump_month_data)</div><div class="line">        </div><div class="line">        <span class="comment"># 调整数据 adjpoll</span></div><div class="line">        adjpoll_trump_month_data = adjpoll_trump_data[month_array == month]</div><div class="line">        <span class="comment"># 统计当月的总票数</span></div><div class="line">        adjpoll_trump_month_sum = get_sum(adjpoll_trump_month_data)</div><div class="line">        </div><div class="line">        results.append((month, rawpoll_clinton_month_sum, adjpoll_clinton_month_sum, rawpoll_trump_month_sum, adjpoll_trump_month_sum))</div><div class="line">        </div><div class="line">    <span class="keyword">print</span> results</div><div class="line">    </div><div class="line">    months, raw_cliton_sum, adj_cliton_sum, raw_trump_sum, adj_trump_sum = zip(*results)</div><div class="line">    </div><div class="line">    <span class="comment">## Step5. 可视化分析结果</span></div><div class="line">    fig, subplot_arr = plt.subplots(<span class="number">2</span>,<span class="number">2</span>, figsize=(<span class="number">15</span>,<span class="number">10</span>))</div><div class="line"></div><div class="line">    <span class="comment"># 原始数据趋势展示</span></div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">0</span>].plot(raw_cliton_sum, color=<span class="string">'r'</span>)</div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">0</span>].plot(raw_trump_sum, color=<span class="string">'g'</span>)</div><div class="line">    </div><div class="line">    width = <span class="number">0.25</span></div><div class="line">    x = np.arange(len(months))</div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">1</span>].bar(x, raw_cliton_sum, width, color=<span class="string">'r'</span>)</div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">1</span>].bar(x + width, raw_trump_sum, width, color=<span class="string">'g'</span>)</div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">1</span>].set_xticks(x + width)</div><div class="line">    subplot_arr[<span class="number">0</span>,<span class="number">1</span>].set_xticklabels(months, rotation=<span class="string">'vertical'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 调整数据趋势展示</span></div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">0</span>].plot(adj_cliton_sum, color=<span class="string">'r'</span>)</div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">0</span>].plot(adj_trump_sum, color=<span class="string">'g'</span>)</div><div class="line">    </div><div class="line">    width = <span class="number">0.25</span></div><div class="line">    x = np.arange(len(months))</div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">1</span>].bar(x, adj_cliton_sum, width, color=<span class="string">'r'</span>)</div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">1</span>].bar(x + width, adj_trump_sum, width, color=<span class="string">'g'</span>)</div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">1</span>].set_xticks(x + width)</div><div class="line">    subplot_arr[<span class="number">1</span>,<span class="number">1</span>].set_xticklabels(months, rotation=<span class="string">'vertical'</span>)</div><div class="line">    </div><div class="line">    plt.subplots_adjust(wspace=<span class="number">0.2</span>)</div><div class="line">    </div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="comment"># 运行入口</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run_main()</div></pre></td></tr></table></figure>
<h3 id="3-数据分析结果-红色克林顿绿色川普"><a href="#3-数据分析结果-红色克林顿绿色川普" class="headerlink" title="3.数据分析结果(红色克林顿绿色川普)"></a>3.数据分析结果(红色克林顿绿色川普)</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/pythoncollection.png?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="红色克林顿绿色川普"></p>
<h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h3><p>一切都是命中注定，He says that everything is predetermined.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Project-Detail&quot;&gt;&lt;a href=&quot;#1-Project-Detail&quot; class=&quot;headerlink&quot; title=&quot;1.Project Detail&quot;&gt;&lt;/a&gt;1.Project Detail&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;地址: &lt;a href=&quot;https://www.kaggle.com/fivethirtyeight/2016-election-polls&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;(建议翻墙)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据来源: 下载 presidential_polls.csv(This dataset is a collection of state and national polls conducted from November 2015-November 2016 on the 2016 presidential election) , 共27列数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inspiration: 分析每个月的民意调查统计趋势&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-撸代码&quot;&gt;&lt;a href=&quot;#2-撸代码&quot; class=&quot;headerlink&quot; title=&quot;2.撸代码&quot;&gt;&lt;/a&gt;2.撸代码&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="纯代码" scheme="http://yoursite.com/tags/%E7%BA%AF%E4%BB%A3%E7%A0%81/"/>
    
      <category term="kaggle" scheme="http://yoursite.com/tags/kaggle/"/>
    
      <category term="numpy" scheme="http://yoursite.com/tags/numpy/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>搭建Python开发环境(win10)</title>
    <link href="http://yoursite.com/2017/04/29/build-python-devenv/"/>
    <id>http://yoursite.com/2017/04/29/build-python-devenv/</id>
    <published>2017-04-29T10:44:31.000Z</published>
    <updated>2017-04-29T11:58:46.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Anaconda2"><a href="#安装Anaconda2" class="headerlink" title="安装Anaconda2"></a>安装Anaconda2</h3><ul>
<li><p>版本: 4.3.1-Windows-x86_64 (选择Python3.6 or Python2.7)</p>
</li>
<li><p>安装地址: <a href="https://www.continuum.io/downloads#windows" target="_blank" rel="external">&gt;&gt;</a></p>
</li>
</ul>
<h3 id="安装-JetBrains-PyCharm"><a href="#安装-JetBrains-PyCharm" class="headerlink" title="安装 JetBrains PyCharm"></a>安装 JetBrains PyCharm</h3><ul>
<li>版本: PyCharm Professional Edition</li>
</ul>
<a id="more"></a>
<ul>
<li>安装地址: <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">&gt;&gt;</a>, 安装时选择自动配置Python环境变量</li>
</ul>
<h3 id="PyCharm设置"><a href="#PyCharm设置" class="headerlink" title="PyCharm设置"></a>PyCharm设置</h3><ul>
<li>在New Project的Interpreter中指定python.exe路径</li>
</ul>
<h3 id="Anaconda常用命令"><a href="#Anaconda常用命令" class="headerlink" title="Anaconda常用命令"></a>Anaconda常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">python --vesion </div><div class="line"></div><div class="line">ipython <span class="comment">#交互式命令行 Shell</span></div><div class="line"> </div><div class="line">jupyter notebook  <span class="comment">#cd到.ipynb文件目录 启动jupyter</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>让Python带你飞</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装Anaconda2&quot;&gt;&lt;a href=&quot;#安装Anaconda2&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda2&quot;&gt;&lt;/a&gt;安装Anaconda2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;版本: 4.3.1-Windows-x86_64 (选择Python3.6 or Python2.7)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装地址: &lt;a href=&quot;https://www.continuum.io/downloads#windows&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装-JetBrains-PyCharm&quot;&gt;&lt;a href=&quot;#安装-JetBrains-PyCharm&quot; class=&quot;headerlink&quot; title=&quot;安装 JetBrains PyCharm&quot;&gt;&lt;/a&gt;安装 JetBrains PyCharm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;版本: PyCharm Professional Edition&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在redis中使用Lua脚本</title>
    <link href="http://yoursite.com/2017/04/28/redis-uselua/"/>
    <id>http://yoursite.com/2017/04/28/redis-uselua/</id>
    <published>2017-04-28T15:40:21.000Z</published>
    <updated>2017-04-29T10:33:32.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h2><p>Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下:<br><a id="more"></a></p>
<ul>
<li><p>减少网络开销: 多个redis请求可以在一个脚本中一次发送一个请求,减少网络往返时延。</p>
</li>
<li><p>原子操作: Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。编写脚本的<br>过程中无需担心会出现竞态条件,也就无需使用事务。事务可以完成的所有功能都可以用脚本实现。</p>
</li>
<li><p>复用: 客户端发送的脚本会永久存储在Redis中,其他语言开发的项目可以复用之。</p>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="1-访问频率限制"><a href="#1-访问频率限制" class="headerlink" title="1.访问频率限制"></a>1.访问频率限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span> <span class="built_in">times</span> = redis.call(<span class="string">'incr'</span>,KEYS[1])</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">times</span> == 1 <span class="keyword">then</span> </div><div class="line"><span class="comment">#KEYS[1]键刚创建,所以为其设置生存时间</span></div><div class="line">redis.call(<span class="string">'expire'</span>,KEYS[1],ARGV[1])</div><div class="line">end </div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">times</span> &gt; tonumber(ARGV[2]) <span class="keyword">then</span>	</div><div class="line"><span class="built_in">return</span> 0</div><div class="line">end </div><div class="line"></div><div class="line"><span class="built_in">return</span> 1	</div><div class="line"></div><div class="line"><span class="comment">#保存该脚本为test.lua,执行该脚本:</span></div><div class="line"></div><div class="line">redis-cli --eval /path/test.lua key1 , 10 2</div><div class="line"></div><div class="line"><span class="comment">#--eval参数是告诉redis-cli读取并运行后面的Lua脚本,/path/test.jua是脚本文件的路径,key1是要操作的键，在脚本中使用KEYS[1]获取,10和2是参数，在脚本中使用ARGV[1]和ARGV[2]获得值（每10秒最多访问3次),注意空格</span></div></pre></td></tr></table></figure>
<h3 id="2-java代码示例"><a href="#2-java代码示例" class="headerlink" title="2.java代码示例"></a>2.java代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//redis lua 脚本</span></div><div class="line"><span class="keyword">static</span> String luaScript = <span class="string">"local timeValue = redis.call('get',KEYS[1]) if timeValue &lt; ARGV[1] then return  redis.call('mset',KEYS[1],ARGV[1],KEYS[2],ARGV[2]) end return nil"</span>;</div><div class="line"></div><div class="line"><span class="comment">//执行脚本</span></div><div class="line">redisClient.executeLuaScript(luaScript,<span class="string">"key1"</span>, <span class="string">"key2"</span>, <span class="string">"value1"</span>, <span class="string">"value2"</span>);</div><div class="line"></div><div class="line"><span class="comment">//executeLuaScript方法:</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">executeLuaScript</span><span class="params">(String script,String key1,String key2,String avg1,String avg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execution(<span class="keyword">new</span> JedisResultTask() &#123;</div><div class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doExecution</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.eval(script,<span class="number">2</span>,key1,key2,avg1,avg2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="3-解决抢红包高并发的问题"><a href="#3-解决抢红包高并发的问题" class="headerlink" title="3.解决抢红包高并发的问题"></a>3.解决抢红包高并发的问题</h3><blockquote>
<blockquote>
<blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/hengyunabc/article/details/19433779/" target="_blank" rel="external">传送门</a></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;脚本介绍&quot;&gt;&lt;a href=&quot;#脚本介绍&quot; class=&quot;headerlink&quot; title=&quot;脚本介绍&quot;&gt;&lt;/a&gt;脚本介绍&lt;/h2&gt;&lt;p&gt;Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>在Redis中使用管道</title>
    <link href="http://yoursite.com/2017/04/23/redis-usepip/"/>
    <id>http://yoursite.com/2017/04/23/redis-usepip/</id>
    <published>2017-04-23T11:12:45.000Z</published>
    <updated>2017-04-30T18:15:01.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>客户端和Redis使用TCP协议连接。不论是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果,都需要进过网络传输,这两部分的总耗时称为往返时延。大致来说到本地回环地址(loop back address)的往返时延在数据量级上相当于Redis处理一条简单命令的时间。<br>如果执行较多的命令,每个命令的往返时延累加起来对性能还是有一定影响的。</p>
<a id="more"></a>
<p>在执行多个命令时每条命令都需要等待上一条命令执行完才能执行,即使命令不需要上一条命令的执行结果。Redis的底层通信协议对管道(pipelining)提供了支持。通过管道可以一次性发送多条命令并在执行完成后一次性将结果返回，当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这组命令一起通过管道发出。管道通过减少客户端与Redis的通信次数来实现降低往返时延累计值的目的。</p>
<p>简单概括两点就是:</p>
<ul>
<li>多个命令之间没有依赖关系,每个命令只需单独执行</li>
<li>对响应时间要求苛刻</li>
</ul>
<h3 id="不使用管道时命令执行示意图（纵向表示时间）"><a href="#不使用管道时命令执行示意图（纵向表示时间）" class="headerlink" title="不使用管道时命令执行示意图（纵向表示时间）"></a>不使用管道时命令执行示意图（纵向表示时间）</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/1.jpg?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="不使用管道时命令执行示意图"></p>
<h3 id="使用管道时命令执行示意图"><a href="#使用管道时命令执行示意图" class="headerlink" title="使用管道时命令执行示意图"></a>使用管道时命令执行示意图</h3><p><img src="http://oov8bjfvw.bkt.clouddn.com/2.jpg?imageView2/0/q/75|watermark/2/text/6aaZ6JWJ54mM6Iu55p6c/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/NorthEast/dx/10/dy/10|imageslim" alt="使用管道时命令执行示意图"></p>
<h2 id="java代码示例"><a href="#java代码示例" class="headerlink" title="java代码示例"></a>java代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">redisClient.executionPipelinedExt(<span class="keyword">new</span> Redis.JedisResultTask&lt;Object&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">protected</span> Object <span class="title">doExecution</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">              Pipeline pipeline = jedis.pipelined();</div><div class="line">              </div><div class="line">              pipeline.set(“key1”,“value1”);</div><div class="line">              pipeline.set(“key2”,“value2”);</div><div class="line">              pipeline.set(“key3”,“value3”);</div><div class="line">		...</div><div class="line">              pipeline.sync();</div><div class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h2 id="Python代码示例-使用redis-py"><a href="#Python代码示例-使用redis-py" class="headerlink" title="Python代码示例(使用redis-py)"></a>Python代码示例(使用<a href="http://redis-py.readthedocs.io/en/latest/" target="_blank" rel="external">redis-py</a>)</h2><!-- more -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> redis</div><div class="line">r = redis.StrictRedis()</div><div class="line"></div><div class="line"><span class="comment"># redis-py的事务使用方式如下:</span></div><div class="line"></div><div class="line">pipe = r.pipeline()</div><div class="line">pipe.set(<span class="string">'key1'</span>,<span class="string">'value1'</span>)</div><div class="line">pipe.get(<span class="string">'key1'</span>)</div><div class="line">result = pipe.execute()</div><div class="line"><span class="keyword">print</span> result</div><div class="line"></div><div class="line"><span class="comment"># 管道的使用方式和事务相同,只不过需要在创建时加上参数transaction=False:</span></div><div class="line"></div><div class="line">pipe = r.pipeline(transaction=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 支持链式调用</span></div><div class="line"></div><div class="line">r.pipeline().set(<span class="string">'key1'</span>,<span class="string">'value1'</span>).get(<span class="string">'key1'</span>).execute()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;客户端和Redis使用TCP协议连接。不论是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果,都需要进过网络传输,这两部分的总耗时称为往返时延。大致来说到本地回环地址(loop back address)的往返时延在数据量级上相当于Redis处理一条简单命令的时间。&lt;br&gt;如果执行较多的命令,每个命令的往返时延累加起来对性能还是有一定影响的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github,搭建个性化博客</title>
    <link href="http://yoursite.com/2017/04/08/create-blog-by-hexo/"/>
    <id>http://yoursite.com/2017/04/08/create-blog-by-hexo/</id>
    <published>2017-04-08T14:05:00.155Z</published>
    <updated>2017-04-30T16:51:50.761Z</updated>
    
    <content type="html"><![CDATA[<p>本教程在Win10上完成的示例,Mac环境可同时参考<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">&gt;&gt;&gt;&gt;</a></p>
<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一.环境准备"></a>一.环境准备</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装  Node.js"></a>安装  Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址 https://nodejs.org/en/</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Git-1.9.5-preview20150319.exe</div></pre></td></tr></table></figure>
<h3 id="配置Git环境变量："><a href="#配置Git环境变量：" class="headerlink" title="配置Git环境变量："></a>配置Git环境变量：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path:</div><div class="line">..\Git\bin</div><div class="line">..\Git\libexec\git-core</div></pre></td></tr></table></figure>
<h3 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h3><h2 id="二-安装Hexo"><a href="#二-安装Hexo" class="headerlink" title="二.安装Hexo"></a>二.安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 打开 Node.js <span class="built_in">command</span> prompt 控制台 (以管理员身份运行）</div><div class="line">&gt; 执行命令  npm install -g hexo</div><div class="line">&gt;  创建一个文件夹，如：C:\blog，<span class="built_in">cd</span>到blog里执行 :  hexo init</div><div class="line">&gt;  继续再B<span class="built_in">log</span>目录下执行命令:   hexo generate （hexo g 也可以），生成静态页面</div><div class="line">&gt;  启动本地服务，进行文章预览调试 :   hexo server</div><div class="line">&gt; 浏览器输入 http://localhost:4000/</div></pre></td></tr></table></figure>
<h2 id="三-配置Github"><a href="#三-配置Github" class="headerlink" title="三.配置Github"></a>三.配置Github</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">创建库,库名格式: 用户名.github.io</div></pre></td></tr></table></figure>
<!-- more -->
<h2 id="四-配置部署"><a href="#四-配置部署" class="headerlink" title="四.配置部署"></a>四.配置部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;在blog目录, 修改  _config.yml文件配置（修改后另存为UTF-8编码）:</div><div class="line"></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/XXX/XXX.github.io.git</div><div class="line">  branch: master</div><div class="line"></div><div class="line">&gt; 组件安装  ： npm install hexo-deployer-git --save </div><div class="line">&gt;  部署 hexo deploy</div></pre></td></tr></table></figure>
<h2 id="五-访问"><a href="#五-访问" class="headerlink" title="五.访问"></a>五.访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://XXX.github.io/</div></pre></td></tr></table></figure>
<h2 id="六-一些基本路径"><a href="#六-一些基本路径" class="headerlink" title="六. 一些基本路径"></a>六. 一些基本路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文章在 <span class="built_in">source</span>/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里</div></pre></td></tr></table></figure>
<h2 id="七-常用命令"><a href="#七-常用命令" class="headerlink" title="七.常用命令"></a>七.常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章，生成指定名称的文章至 hexo\source\_posts\postName.md 编辑器可以用Sublime，支持 markdown 语法 推荐一款markdown在线编辑工具(https://www.zybuluo.com/mdeditor),本机操作可使用markdownpad                     </span></div><div class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></div><div class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="comment">#开启预览访问端口 ,进行文章预览调试（http://localhost:4000/ ，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></div><div class="line">hexo <span class="built_in">help</span>  <span class="comment">#查看帮助</span></div><div class="line">hexo version  <span class="comment">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<h3 id="新增文章-修改文章后-依次执行以下命令"><a href="#新增文章-修改文章后-依次执行以下命令" class="headerlink" title="新增文章 修改文章后 依次执行以下命令"></a>新增文章 修改文章后 依次执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">#非必须</span></div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="八-更换主题"><a href="#八-更换主题" class="headerlink" title="八.更换主题"></a>八.更换主题</h2><h3 id="主题下载："><a href="#主题下载：" class="headerlink" title="主题下载："></a>主题下载：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div><div class="line"></div><div class="line">https://github.com/litten/hexo-theme-yilia.git  是主题路径</div><div class="line">themes/yilia 是主题目录 ,目录是否是yilia 无所谓，只要与_config.yml文件中的配置一致即可。 主题很多可自行选择。</div></pre></td></tr></table></figure>
<h3 id="主题配置修改"><a href="#主题配置修改" class="headerlink" title="主题配置修改"></a>主题配置修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">安装完成后，打开 blog\_config.yml ，修改主题为 yilia</div><div class="line"></div><div class="line">theme: yilia</div></pre></td></tr></table></figure>
<h3 id="主题配置项修改"><a href="#主题配置项修改" class="headerlink" title="主题配置项修改"></a>主题配置项修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">打开 blog\themes\yilia 目录，编辑主题配置文件 _config.yml</div></pre></td></tr></table></figure>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/yilia</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h2 id="九-域名绑定"><a href="#九-域名绑定" class="headerlink" title="九.域名绑定"></a>九.域名绑定</h2><p>可参考这个<a href="https://zhidao.baidu.com/question/1961019546914335340.html" target="_blank" rel="external">&gt;&gt;&gt;</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程在Win10上完成的示例,Mac环境可同时参考&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-环境准备&quot;&gt;&lt;a href=&quot;#一-环境准备&quot; class=&quot;headerlink&quot; title=&quot;一.环境准备&quot;&gt;&lt;/a&gt;一.环境准备&lt;/h2&gt;&lt;h3 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装  Node.js&quot;&gt;&lt;/a&gt;安装  Node.js&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;下载地址 https://nodejs.org/en/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
