[{"title":"搭建Python开发环境(win10)","date":"2017-04-29T10:44:31.000Z","path":"2017/04/29/build-python-devenv/","text":"安装Anaconda2 版本: 4.3.1-Windows-x86_64 (选择Python3.6 or Python2.7) 安装地址: &gt;&gt; 安装 JetBrains PyCharm 版本: PyCharm Professional Edition 安装地址: &gt;&gt;, 安装时选择自动配置Python环境变量 PyCharm设置 在New Project的Interpreter中指定python.exe路径 Anaconda常用命令12345678python --vesion ipython #交互式命令行 Shell jupyter notebook #cd到.ipynb文件目录 启动jupyterexit 让Python带你飞","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"在redis中使用Lua脚本","date":"2017-04-28T15:40:21.000Z","path":"2017/04/28/redis-uselua/","text":"脚本介绍Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下: 减少网络开销: 多个redis请求可以在一个脚本中一次发送一个请求,减少网络往返时延。 原子操作: Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。编写脚本的过程中无需担心会出现竞态条件,也就无需使用事务。事务可以完成的所有功能都可以用脚本实现。 复用: 客户端发送的脚本会永久存储在Redis中,其他语言开发的项目可以复用之。 代码示例1.访问频率限制123456789101112131415161718local times = redis.call('incr',KEYS[1])if times == 1 then #KEYS[1]键刚创建,所以为其设置生存时间redis.call('expire',KEYS[1],ARGV[1])end if times &gt; tonumber(ARGV[2]) then return 0end return 1 #保存该脚本为test.lua,执行该脚本:redis-cli --eval /path/test.lua key1 , 10 2#--eval参数是告诉redis-cli读取并运行后面的Lua脚本,/path/test.jua是脚本文件的路径,key1是要操作的键，在脚本中使用KEYS[1]获取,10和2是参数，在脚本中使用ARGV[1]和ARGV[2]获得值（每10秒最多访问3次),注意空格 2.java代码示例123456789101112131415//redis lua 脚本static String luaScript = \"local timeValue = redis.call('get',KEYS[1]) if timeValue &lt; ARGV[1] then return redis.call('mset',KEYS[1],ARGV[1],KEYS[2],ARGV[2]) end return nil\";//执行脚本redisClient.executeLuaScript(luaScript,\"key1\", \"key2\", \"value1\", \"value2\");//executeLuaScript方法:public Object executeLuaScript(String script,String key1,String key2,String avg1,String avg2) throws Exception &#123; return this.execution(new JedisResultTask() &#123; protected Object doExecution(Jedis jedis) &#123; return jedis.eval(script,2,key1,key2,avg1,avg2); &#125; &#125;); &#125; 3.解决抢红包高并发的问题 传送门","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"},{"name":"Lua","slug":"Lua","permalink":"http://yoursite.com/tags/Lua/"}]},{"title":"在Redis中使用管道","date":"2017-04-23T11:12:45.000Z","path":"2017/04/23/redis-usepip/","text":"使用场景客户端和Redis使用TCP协议连接。不论是客户端向Redis发送命令还是Redis向客户端返回命令的执行结果,都需要进过网络传输,这两部分的总耗时称为往返时延。大致来说到本地回环地址(loop back address)的往返时延在数据量级上相当于Redis处理一条简单命令的时间。如果执行较多的命令,每个命令的往返时延累加起来对性能还是有一定影响的。在执行多个命令时每条命令都需要等待上一条命令执行完才能执行,即使命令不需要上一条命令的执行结果。Redis的底层通信协议对管道(pipelining)提供了支持。通过管道可以一次性发送多条命令并在执行完成后一次性将结果返回，当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这组命令一起通过管道发出。管道通过减少客户端与Redis的通信次数来实现降低往返时延累计值的目的。 简单概括两点就是: 多个命令之间没有依赖关系,每个命令只需单独执行 对响应时间要求苛刻 不使用管道时命令执行示意图（纵向表示时间） 使用管道时命令执行示意图 java代码示例1234567891011121314redisClient.executionPipelinedExt(new Redis.JedisResultTask&lt;Object&gt;() &#123; @Override protected Object doExecution(Jedis jedis) &#123; Pipeline pipeline = jedis.pipelined(); pipeline.set(“key1”,“value1”); pipeline.set(“key2”,“value2”); pipeline.set(“key3”,“value3”); ... pipeline.sync(); return null; &#125; &#125;); Python代码示例(使用redis-py) 12345678910111213141516171819import redisr = redis.StrictRedis()# redis-py的事务使用方式如下:pipe = r.pipeline()pipe.set('key1','value1')pipe.get('key1')result = pipe.execute()print result# 管道的使用方式和事务相同,只不过需要在创建时加上参数transaction=False:pipe = r.pipeline(transaction=False)# 支持链式调用r.pipeline().set('key1','value1').get('key1').execute()","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"HEXO+Github,搭建个性化博客","date":"2017-04-08T14:05:00.155Z","path":"2017/04/08/create-blog-by-hexo/","text":"本教程在Win10上完成的示例,Mac环境可同时参考&gt;&gt;&gt;&gt; 一.环境准备安装 Node.js1下载地址 https://nodejs.org/en/ 安装 Git1Git-1.9.5-preview20150319.exe 配置Git环境变量：123Path:..\\Git\\bin..\\Git\\libexec\\git-core 注册Github账户二.安装Hexo123456&gt; 打开 Node.js command prompt 控制台 (以管理员身份运行）&gt; 执行命令 npm install -g hexo&gt; 创建一个文件夹，如：C:\\blog，cd到blog里执行 : hexo init&gt; 继续再Blog目录下执行命令: hexo generate （hexo g 也可以），生成静态页面&gt; 启动本地服务，进行文章预览调试 : hexo server&gt; 浏览器输入 http://localhost:4000/ 三.配置Github1创建库,库名格式: 用户名.github.io 四.配置部署123456789&gt;在blog目录, 修改 _config.yml文件配置（修改后另存为UTF-8编码）:deploy: type: git repository: https://github.com/XXX/XXX.github.io.git branch: master&gt; 组件安装 ： npm install hexo-deployer-git --save &gt; 部署 hexo deploy 五.访问1https://XXX.github.io/ 六. 一些基本路径1文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里 七.常用命令1234567hexo new \"postName\" #新建文章，生成指定名称的文章至 hexo\\source\\_posts\\postName.md 编辑器可以用Sublime，支持 markdown 语法 推荐一款markdown在线编辑工具(https://www.zybuluo.com/mdeditor),本机操作可使用markdownpad hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口 ,进行文章预览调试（http://localhost:4000/ ，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 新增文章 修改文章后 依次执行以下命令123hexo clean #非必须hexo generatehexo deploy 八.更换主题主题下载：1234git clone https://github.com/litten/hexo-theme-yilia.git themes/yiliahttps://github.com/litten/hexo-theme-yilia.git 是主题路径themes/yilia 是主题目录 ,目录是否是yilia 无所谓，只要与_config.yml文件中的配置一致即可。 主题很多可自行选择。 主题配置修改123安装完成后，打开 blog\\_config.yml ，修改主题为 yiliatheme: yilia 主题配置项修改1打开 blog\\themes\\yilia 目录，编辑主题配置文件 _config.yml 更新主题12cd themes/yiliagit pull 九.域名绑定可参考这个&gt;&gt;&gt;","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]}]